@page "/registration"
@using BlazorWebAPI.Models
@using BlazorWebAPI.Services;
@inject NavigationManager Navigation;
@inject ILoginService loginService
@using Microsoft.Extensions.Logging

@inject ILogger<Registration> Logger


<h3>Login to Access Application</h3>

<div class="alert alert-info">
   Registration Page
</div>

<EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="alert alert-danger" hidden="@ErrorMsg">
        @response.GetMessage
    </div>
    <div class="form-group">
        <label>User Name</label>
        <InputText id="name" @bind-Value="loginModel.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label>Date of Birth</label>
        <InputDate id="date" @bind-Value="loginModel.DOB" Format="dd/MMM/yyyy" class="form-control" />
    </div>
    <div class="form-group">
        <label>Place of Birth</label>
        <InputText id="name" @bind-Value="loginModel.POB" class="form-control" />
    </div>
    <div class="form-group">
        <label>Email Id</label>
        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
    </div>
    <div class="form-group">
        <label>User Id</label>
        <InputText id="name" @bind-Value="loginModel.UserId" class="form-control" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
    </div>
    <div class="container" style="margin-top:10px">

        <div class="card">
            <div class="card-header">
                @* <InputFile id="MyInputFile" accept=".jpg,.jpeg,.Bitmap,.png" OnChange="OnChangeFile" /> *@
                <button type="button" @onclick="@CaptureImage" class="btn btn-primary">Capture</button>
                <button type="button" @onclick="@BrowseImage" class="btn btn-primary">Browse</button>
                <button type="button" @onclick="@RemoveImage" class="btn btn-primary">Remove</button>
            </div>
            <div class="card-body">
                <img src="@imgSrc" width="200" height="200" style="border: 1px solid; border-block-color:black" />
            </div>
        </div>
    </div>
    <div class="form-group mt-1">
        <button type="submit" class="btn btn-primary w-100">Ragister Now</button>
    </div>
</EditForm>

@code {
    private User loginModel = new();
    private Response response = new Response();
    private bool ErrorMsg = true;
    private string imgSrc = null;
    private byte[] _fileBytes = null;


    protected override void OnInitialized()
    {
        LoadLocalImage();

        loginModel.DOB = DateTime.Today;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            loginModel.myArray = _fileBytes;
            var saveData = await loginService.SaveUser(loginModel);

            // *** CRITICAL CHANGE: Check the Status property of the response ***
            if (saveData != null && saveData.Status == 1) // Assuming Status = 1 means success
            {
                await App.Current.MainPage.DisplayAlert("Success", "Registration Successful", "OK");
                Navigation.NavigateTo("/login", true);
            }
            else
            {
                // Display the error message from the response, or a generic one if no specific message
                response.GetMessage = saveData?.GetMessage ?? "Registration Failed. Please try again.";
                ErrorMsg = false;
                this.StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // ... (your existing error logging)
            Logger.LogError(ex, "Error during registration");
            await App.Current.MainPage.DisplayAlert("Error", "An error occurred during registration", "OK");
        }
    }

    private async void CaptureImage()
    {
        if (MediaPicker.Default.IsCaptureSupported)
        {
            var photo = await MediaPicker.Default.CapturePhotoAsync();

            if (photo != null)
            {
                var stream = await photo.OpenReadAsync();
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                _fileBytes = memoryStream.ToArray();
                var pic = GetImage(Convert.ToBase64String(_fileBytes));
                imgSrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(pic));
                this.StateHasChanged();
            }
        }
    }

    private async void BrowseImage()
    {

        var result = await MediaPicker.PickPhotoAsync(new MediaPickerOptions
        {
            Title = "Pick an image"
        });

        if (result != null)
        {
            var stream = await result.OpenReadAsync();
            var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            _fileBytes = memoryStream.ToArray();
            var pic = GetImage(Convert.ToBase64String(_fileBytes));
            imgSrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(pic));
            this.StateHasChanged();
        }

    }

    private async void RemoveImage()
    {
        LoadLocalImage();
    }
    

    public byte[] GetImage(string sBase64String)
    {
        byte[] bytes = null;
        if (!string.IsNullOrEmpty(sBase64String))
        {
            bytes = Convert.FromBase64String(sBase64String);
        }
        return bytes;
    }

    public async void LoadLocalImage()
    {
        try
        {
            var stream = await FileSystem.OpenAppPackageFileAsync("student.png");
            using (var ms = new MemoryStream())
            {
                await stream.CopyToAsync(ms);
                _fileBytes = ms.ToArray();
            }
            var pic = GetImage(Convert.ToBase64String(_fileBytes));
            imgSrc = null;
            imgSrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(pic));
            this.StateHasChanged();
        }
        catch (FileNotFoundException ex)
        {
            // dataResourceText = "Data file not found.";
            Logger.LogError(ex, "'Resource/Raw/student.png' not found.");
            await App.Current.MainPage.DisplayAlert("Oops",
        "Something went wrong File not Found", "OK");
        }
    }
}
